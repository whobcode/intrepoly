name: Build and Push Container

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '**/*.md'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  DOCKER_BUILDKIT: 1

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute tags
        id: meta
        run: |
          SHA_TAG=sha-${GITHUB_SHA::12}
          echo "sha_tag=${SHA_TAG}" >> $GITHUB_OUTPUT
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "latest_tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: containers/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.sha_tag }}
            ${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.latest_tag || 'ci' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image reference
        id: out
        run: |
          echo "image=${IMAGE_NAME}:${{ steps.meta.outputs.sha_tag }}" >> $GITHUB_OUTPUT

      - name: Prepare Cloudflare Containers command
        run: |
          IMAGE_REF=${{ steps.out.outputs.image }}
          cat > cf-containers-create.txt <<'EOT'
          # Fill in the env vars and run:
          export CF_ACCOUNT_ID="<your-account-id>"
          export CF_API_TOKEN="<token with containers write + dns edit>"
          export SERVICE_NAME="monopoly"
          export IMAGE_REF="${IMAGE_REF}"
          export GAME_HOSTNAME="game.hwmnbn.me"
          export AUTH_SECRET="<strong-secret>"
          # Optional: token-mode tunnel for ingress
          export TUNNEL_TOKEN="<cloudflared_tunnel_token>"

          # Create or update service (example via HTTP API; endpoint may evolve):
          # curl -X PUT \
          #  -H "Authorization: Bearer $CF_API_TOKEN" \
          #  -H "Content-Type: application/json" \
          #  "https://api.cloudflare.com/client/v4/accounts/$CF_ACCOUNT_ID/containers/services/$SERVICE_NAME" \
          #  -d "$(jq -n --arg image "$IMAGE_REF" --arg host "$GAME_HOSTNAME" --arg auth "$AUTH_SECRET" --arg token "$TUNNEL_TOKEN" '{
          #        name: $ENV.SERVICE_NAME,
          #        containers: [{ image: $image, env: { PORT: "444", AUTH_SECRET: $auth, TUNNEL_TOKEN: $token } }],
          #        ingress: [{ hostname: $host, service: "http://127.0.0.1:444" }]
          #      }')"

          # If using the Cloudflare CLI instead, it may look like:
          # cloudflare containers services create "$SERVICE_NAME" --image "$IMAGE_REF" \
          #   --env PORT=444 --env AUTH_SECRET="$AUTH_SECRET" --env TUNNEL_TOKEN="$TUNNEL_TOKEN" \
          #   --hostname "$GAME_HOSTNAME" --service http://127.0.0.1:444
          EOT
          echo "Prepared cf-containers-create.txt with command templates."

      - name: Upload command templates
        uses: actions/upload-artifact@v4
        with:
          name: cf-containers-create
          path: cf-containers-create.txt

